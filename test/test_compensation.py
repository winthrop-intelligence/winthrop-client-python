# coding: utf-8

"""
    Winthrop Intelligence Internal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import winthrop_client_python
from winthrop_client_python.models.compensation import Compensation  # noqa: E501
from winthrop_client_python.rest import ApiException


class TestCompensation(unittest.TestCase):
    """Compensation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Compensation
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `Compensation`
        """
        model = winthrop_client_python.models.compensation.Compensation()  # noqa: E501
        if include_optional :
            return Compensation(
                id = 1, 
                bonus_comp_cents = 10000, 
                deferred_comp_cents = 10000, 
                talent_fee = 10000, 
                num_cars = 1, 
                country_club_dues_cents = 10000, 
                coach_id = 1, 
                buyout_terms = 'This is a buyout term', 
                executed_on = '2019-01-01T00:00Z', 
                expires_on = '2019-01-01T00:00Z', 
                start_on = '2019-01-01T00:00Z', 
                end_on = '2019-01-01T00:00Z', 
                average_yearly_comp_cents = 10000, 
                created_at = '2019-01-01T00:00Z', 
                updated_at = '2019-01-01T00:00Z', 
                outside_income_cents = 10000, 
                one_time_bonus_cents = 10000, 
                comment = 'This is a comment', 
                car_stipend_cents = 10000, 
                country_club_membership_paid = False, 
                base_salary_cents = 10000, 
                bonus_has_contingents = False, 
                calculated_guaranteed_comp_cents = 10000, 
                contingent_bonus_comp_cents = 10000, 
                noncontingent_bonus_comp_cents = 10000, 
                compensation_type = 'This is a compensation type', 
                media_link = 'This is a media link', 
                contract_status_id = 1, 
                year = 2019, 
                school_id = 1
            )
        else :
            return Compensation(
        )
        """

    def testCompensation(self):
        """Test Compensation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
