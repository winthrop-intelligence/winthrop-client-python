# coding: utf-8

"""
Winthrop Intelligence Internal API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.38.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class RawContract(BaseModel):
    """
    RawContract
    """  # noqa: E501

    id: Optional[StrictInt] = None
    asset_file_size: Optional[StrictInt] = None
    asset_content_type: Optional[StrictStr] = None
    asset_file_name: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    contract_type_id: Optional[StrictInt] = None
    uploaded: Optional[StrictInt] = None
    deal_id: Optional[StrictInt] = None
    school_id: Optional[StrictInt] = None
    school_revenue_year: Optional[StrictInt] = None
    audited_financial_year: Optional[StrictInt] = None
    text: Optional[StrictStr] = None
    use_flexpaper: Optional[StrictBool] = None
    game_contracts_count: Optional[StrictInt] = None
    drive_id: Optional[StrictStr] = None
    migrated_successfully: Optional[StrictBool] = None
    migration_failure_reason: Optional[StrictStr] = None
    unstract_pdf_text: Optional[StrictStr] = None
    unstract_responses_details: Optional[Any] = None
    layout_preserved_pdf_text: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "asset_file_size",
        "asset_content_type",
        "asset_file_name",
        "created_at",
        "updated_at",
        "contract_type_id",
        "uploaded",
        "deal_id",
        "school_id",
        "school_revenue_year",
        "audited_financial_year",
        "text",
        "use_flexpaper",
        "game_contracts_count",
        "drive_id",
        "migrated_successfully",
        "migration_failure_reason",
        "unstract_pdf_text",
        "unstract_responses_details",
        "layout_preserved_pdf_text",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RawContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if unstract_responses_details (nullable) is None
        # and model_fields_set contains the field
        if (
            self.unstract_responses_details is None
            and "unstract_responses_details" in self.model_fields_set
        ):
            _dict["unstract_responses_details"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RawContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "asset_file_size": obj.get("asset_file_size"),
                "asset_content_type": obj.get("asset_content_type"),
                "asset_file_name": obj.get("asset_file_name"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "contract_type_id": obj.get("contract_type_id"),
                "uploaded": obj.get("uploaded"),
                "deal_id": obj.get("deal_id"),
                "school_id": obj.get("school_id"),
                "school_revenue_year": obj.get("school_revenue_year"),
                "audited_financial_year": obj.get("audited_financial_year"),
                "text": obj.get("text"),
                "use_flexpaper": obj.get("use_flexpaper"),
                "game_contracts_count": obj.get("game_contracts_count"),
                "drive_id": obj.get("drive_id"),
                "migrated_successfully": obj.get("migrated_successfully"),
                "migration_failure_reason": obj.get("migration_failure_reason"),
                "unstract_pdf_text": obj.get("unstract_pdf_text"),
                "unstract_responses_details": obj.get("unstract_responses_details"),
                "layout_preserved_pdf_text": obj.get("layout_preserved_pdf_text"),
            }
        )
        return _obj
