# coding: utf-8

"""
    Winthrop Intelligence Internal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from winthrop_client_python.models.avatar import Avatar


class Coach(BaseModel):
    """
    Coach
    """

    id: Optional[StrictInt] = None
    first_name: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    leader: Optional[StrictBool] = None
    bio: Optional[StrictStr] = None
    avatar: Optional[Avatar] = None
    __properties = [
        "id",
        "first_name",
        "last_name",
        "email",
        "phone",
        "leader",
        "bio",
        "avatar",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Coach:
        """Create an instance of Coach from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of avatar
        if self.avatar:
            _dict["avatar"] = self.avatar.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Coach:
        """Create an instance of Coach from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Coach.parse_obj(obj)

        _obj = Coach.parse_obj(
            {
                "id": obj.get("id"),
                "first_name": obj.get("first_name"),
                "last_name": obj.get("last_name"),
                "email": obj.get("email"),
                "phone": obj.get("phone"),
                "leader": obj.get("leader"),
                "bio": obj.get("bio"),
                "avatar": Avatar.from_dict(obj.get("avatar"))
                if obj.get("avatar") is not None
                else None,
            }
        )
        return _obj
