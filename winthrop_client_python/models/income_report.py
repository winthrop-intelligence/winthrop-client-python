# coding: utf-8

"""
Winthrop Intelligence Internal API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.30.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class IncomeReport(BaseModel):
    """
    IncomeReport
    """  # noqa: E501

    id: Optional[StrictInt] = None
    coach_id: StrictInt
    raw_contract_id: Optional[StrictInt] = None
    year: StrictInt
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    notes: Optional[StrictStr] = None
    contract_status_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "coach_id",
        "raw_contract_id",
        "year",
        "created_at",
        "updated_at",
        "notes",
        "contract_status_id",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncomeReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncomeReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "coach_id": obj.get("coach_id"),
                "raw_contract_id": obj.get("raw_contract_id"),
                "year": obj.get("year"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "notes": obj.get("notes"),
                "contract_status_id": obj.get("contract_status_id"),
            }
        )
        return _obj
