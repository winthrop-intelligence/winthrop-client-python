# coding: utf-8

"""
Winthrop Intelligence Internal API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.37.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from winthrop_client_python.models.wire_change_position_types_inner import (
    WireChangePositionTypesInner,
)
from winthrop_client_python.models.wire_change_sports_inner import WireChangeSportsInner
from typing import Optional, Set
from typing_extensions import Self


class WireChange(BaseModel):
    """
    WireChange
    """  # noqa: E501

    id: StrictInt
    coach_id: StrictInt
    school_id: StrictInt
    created_by_id: StrictInt
    effective_date: Optional[datetime] = None
    wire_type: Optional[StrictStr] = None
    position_title: Optional[StrictStr] = None
    article_link: Optional[StrictStr] = None
    article_title: Optional[StrictStr] = None
    article_description: Optional[StrictStr] = None
    article_site_name: Optional[StrictStr] = None
    article_publish_time: Optional[datetime] = None
    article_image_url: Optional[StrictStr] = None
    position_types: Optional[List[WireChangePositionTypesInner]] = None
    sports: Optional[List[WireChangeSportsInner]] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "coach_id",
        "school_id",
        "created_by_id",
        "effective_date",
        "wire_type",
        "position_title",
        "article_link",
        "article_title",
        "article_description",
        "article_site_name",
        "article_publish_time",
        "article_image_url",
        "position_types",
        "sports",
    ]

    @field_validator("wire_type")
    def wire_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["new_hire", "promotion", "extension", "departed"]):
            raise ValueError(
                "must be one of enum values ('new_hire', 'promotion', 'extension', 'departed')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WireChange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in position_types (list)
        _items = []
        if self.position_types:
            for _item in self.position_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict["position_types"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sports (list)
        _items = []
        if self.sports:
            for _item in self.sports:
                if _item:
                    _items.append(_item.to_dict())
            _dict["sports"] = _items
        # set to None if effective_date (nullable) is None
        # and model_fields_set contains the field
        if self.effective_date is None and "effective_date" in self.model_fields_set:
            _dict["effective_date"] = None

        # set to None if wire_type (nullable) is None
        # and model_fields_set contains the field
        if self.wire_type is None and "wire_type" in self.model_fields_set:
            _dict["wire_type"] = None

        # set to None if position_title (nullable) is None
        # and model_fields_set contains the field
        if self.position_title is None and "position_title" in self.model_fields_set:
            _dict["position_title"] = None

        # set to None if article_link (nullable) is None
        # and model_fields_set contains the field
        if self.article_link is None and "article_link" in self.model_fields_set:
            _dict["article_link"] = None

        # set to None if article_title (nullable) is None
        # and model_fields_set contains the field
        if self.article_title is None and "article_title" in self.model_fields_set:
            _dict["article_title"] = None

        # set to None if article_description (nullable) is None
        # and model_fields_set contains the field
        if (
            self.article_description is None
            and "article_description" in self.model_fields_set
        ):
            _dict["article_description"] = None

        # set to None if article_site_name (nullable) is None
        # and model_fields_set contains the field
        if (
            self.article_site_name is None
            and "article_site_name" in self.model_fields_set
        ):
            _dict["article_site_name"] = None

        # set to None if article_publish_time (nullable) is None
        # and model_fields_set contains the field
        if (
            self.article_publish_time is None
            and "article_publish_time" in self.model_fields_set
        ):
            _dict["article_publish_time"] = None

        # set to None if article_image_url (nullable) is None
        # and model_fields_set contains the field
        if (
            self.article_image_url is None
            and "article_image_url" in self.model_fields_set
        ):
            _dict["article_image_url"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WireChange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "coach_id": obj.get("coach_id"),
                "school_id": obj.get("school_id"),
                "created_by_id": obj.get("created_by_id"),
                "effective_date": obj.get("effective_date"),
                "wire_type": obj.get("wire_type"),
                "position_title": obj.get("position_title"),
                "article_link": obj.get("article_link"),
                "article_title": obj.get("article_title"),
                "article_description": obj.get("article_description"),
                "article_site_name": obj.get("article_site_name"),
                "article_publish_time": obj.get("article_publish_time"),
                "article_image_url": obj.get("article_image_url"),
                "position_types": (
                    [
                        WireChangePositionTypesInner.from_dict(_item)
                        for _item in obj["position_types"]
                    ]
                    if obj.get("position_types") is not None
                    else None
                ),
                "sports": (
                    [WireChangeSportsInner.from_dict(_item) for _item in obj["sports"]]
                    if obj.get("sports") is not None
                    else None
                ),
            }
        )
        return _obj
